AWSTemplateFormatVersion: "2010-09-09"
Description: "Internet Gateway and Route Table for public traffic"

Parameters:
  NetworkStack:
    Type: "String"
    Description: "Network stack to apply to."

Resources:
  # Provide the VPC with access to
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  # the internet gateway alone is not enough, it must be attached to a vpc
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId:
        Fn::ImportValue:              # IMPORT a value we exported from another stack
          !Sub ${NetworkStack}-VpcId  # SUB-stitute the NetworkStack parameter

  # traffic must be explicitly routed through the internent gateway for bidirectional 
  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-VpcId
      Tags:
        - Key: Name
          Value: Dmz Routes
        - Key: Scope
          Value: public
  
  # add a route to the route table
  publicRouteToInternet:
    # force Cloudformation to attach the internet gateway before creating the route
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0 # all other traffic not destined for the vpc range
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref publicRouteTable

  # Route tables need to be associated with subnets
  publicRouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-DmzSubnetAId
  
  publicRouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-DmzSubnetBId

  publicRouteTableAssociationC:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-DmzSubnetCId

  # Private subnets will need to reach OUT to the internet while remaining PRIVATE
  # Network address translation solves this, so add a NAT gateway
  NatGateway:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-DmzSubnetAId

  # NAT Gateway needs a public Elastic IP address
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # private subnets need a route table
  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-VpcId
      Tags:
        - Key: Name
          Value: Private Routes
        - Key: Scope
          Value: private
  
  privateRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: privateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  privateRouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-SubnetNodesAId

  privateRouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-SubnetNodesBId
  
  privateRouteTableAssociationC:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-SubnetNodesCId

  


