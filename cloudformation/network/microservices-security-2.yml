AWSTemplateFormatVersion: "2010-09-09"
Description: "Network ACLs for Microservices"

Parameters:
  NetworkStack:
    Type: "String"
    Description: "Network stack to apply to"

Resources:
  # create a network ACL to control traffic at the SUBNET level
  # this is regardless of what instances or security groups are in use within the subnet
  DmzAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      Tags:
        - Key: Name
          Value: Internet traffic
        - Key: Scope
          Value: public
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-VpcId
  
  # NACLs must be explicitly associated with subnets
  DmzAclAssociationA:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref DmzAcl
      SubnetId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-DmzSubnetAId

  DmzAclAssociationB:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref DmzAcl
      SubnetId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-DmzSubnetBId

  DmzAclAssociationC:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref DmzAcl
      SubnetId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-DmzSubnetCId

  # allow inbound udp port 123 for network time (NTP)
  DmzAclEntryIngressNtp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzAcl
      RuleNumber: 100
      Protocol: 17 # 17 for UDP
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 123
        To: 123

  DmzAclEntryEgressNtp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzAcl
      RuleNumber: 100
      Protocol: 17 # 17 for UDP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 123
        To: 123

  # ADDITIONS BELOW:

  # ALLOW INGRESS HTTP
  DmzAclEntryIngressHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzAcl
      RuleNumber: 110
      Protocol: 6 # 6 for TCP
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  # Allow INGRESS HTTPS
  DmzAclEntryIngressHttpS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzAcl
      RuleNumber: 111
      Protocol: 6 # 6 for TCP
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # Allow EGRESS HTTP
  DmzAclEntryEgressHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzAcl
      RuleNumber: 110
      Protocol: 6 # 6 for TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  DmzAclEntryEgressHttpS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzAcl
      RuleNumber: 111
      Protocol: 6 # 6 for TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # Allow INGRESS Ephemeral TCP Ports
  DmzAclEntryIngressWebEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzAcl
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow 
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  # Allow EGRESS Ephemeral TCP ports
  DmzAclEntryEgressWebEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzAcl
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: 1024
        To: 65535

    